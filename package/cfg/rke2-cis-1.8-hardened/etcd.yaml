---
controls:
version: "cis-1.8"
id: 2
text: "Etcd Node Configuration"
type: "etcd"
groups:
  - id: 1.1
    text: "Master Node Configuration Files"
    # These checks (1.1.7,1.1.8,1.1.11,1.1.12) are related to etcd and in upstream they are present
    # in master.yaml, But these checks fail on controlplane nodes which does not have etcd.
    # so these are moved to etcd.yaml, so that the scan passes on the clusters which have seperate
    # controlplane, etcd node. These checks will also run on controlplane nodes which have etcd since
    # run_sonobuoy_plugin.sh script detects etcd process and runs on any node where etcd is found.
    checks:
      - id: 1.1.7
        text: "Ensure that the etcd pod specification file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c permissions=%a $etcdconf; fi'"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod 600 $etcdconf
        scored: true

      - id: 1.1.8
        text: "Ensure that the etcd pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown root:root $etcdconf
        scored: true

      - id: 1.1.11
        text: "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Automated)"
        audit: "stat -c permissions=%a $etcddatadir"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
              set: true
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the command 'ps -ef | grep etcd'.
          Run the below command (based on the etcd data directory found above). For example,
          chmod 700 $etcddatadir
        scored: true

      - id: 1.1.12
        text: "Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)"
        type: "skip"
        audit: "stat -c %U:%G $etcddatadir"
        tests:
          test_items:
            - flag: "etcd:etcd"
        remediation: |
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the command 'ps -ef | grep etcd'.
          Run the below command (based on the etcd data directory found above).
          For example, chown etcd:etcd /var/lib/etcd
        scored: true

  # When possible, we check the flag, the environment variable, and the configuration file
  # kube-bench does not allow nested bin_ops, so when multiple flags are being checked in a single test,
  # we only check the config path.
  - id: 2
    text: "Etcd Node Configuration"
    checks:
      - id: 2.1
        text: "Ensure that the --cert-file and --key-file arguments are set as appropriate (Automated)"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: and
          test_items:
            - path: "{.client-transport-security.cert-file}"
              compare:
                op: eq
                value: "/var/lib/rancher/rke2/server/tls/etcd/server-client.crt"
            - path: "{.client-transport-security.key-file}"
              compare:
                op: eq
                value: "/var/lib/rancher/rke2/server/tls/etcd/server-client.key"
        remediation: |
          By default, RKE2 generates cert and key files for etcd.
          These are located in /var/lib/rancher/rke2/server/tls/etcd/.
          If this check fails, ensure that the configuration file $etcdconf
          has not been modified to use custom cert and key files.
        scored: true

      - id: 2.2
        text: "Ensure that the --client-cert-auth argument is set to true (Automated)"
        audit: "/bin/ps -fC $etcdbin"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--client-cert-auth"
              env: "ETCD_CLIENT_CERT_AUTH"
              compare:
                op: eq
                value: true
            - path: "{.client-transport-security.client-cert-auth}"
              compare:
                op: eq
                value: true
        remediation: |
          By default, RKE2 sets the --client-cert-auth parameter to true.
          If this check fails, ensure that the configuration file $etcdconf
          has not been modified to disable client certificate authentication.
        scored: true

      - id: 2.3
        text: "Ensure that the --auto-tls argument is not set to true (Automated)"
        audit: "/bin/ps -fC $etcdbin"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--auto-tls"
              env: "ETCD_AUTO_TLS"
              set: false
            - flag: "--auto-tls"
              env: "ETCD_AUTO_TLS"
              compare:
                op: eq
                value: false
            - path: "{.client-transport-security.auto-tls}"
              compare:
                op: eq
                value: false
        remediation: |
          By default, RKE2 does not set the --auto-tls parameter.
          If this check fails, edit the etcd pod specification file $etcdconf on the master
          node and either remove the --auto-tls parameter or set it to false.
          client-transport-security:
            auto-tls: false
        scored: true

      - id: 2.4
        text: "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate (Automated)"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: and
          test_items:
            - path: "{.peer-transport-security.cert-file}"
              compare:
                op: eq
                value: "/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.crt"
            - path: "{.peer-transport-security.key-file}"
              compare:
                op: eq
                value: "/var/lib/rancher/rke2/server/tls/etcd/peer-server-client.key"
        remediation: |
          By default, RKE2 generates peer cert and key files for etcd.
          These are located in /var/lib/rancher/rke2/server/tls/etcd/.
          If this check fails, ensure that the configuration file $etcdconf
          has not been modified to use custom peer cert and key files.
        scored: true

      - id: 2.5
        text: "Ensure that the --peer-client-cert-auth argument is set to true (Automated)"
        audit: "/bin/ps -fC $etcdbin"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--peer-client-cert-auth"
              env: "ETCD_PEER_CLIENT_CERT_AUTH"
              compare:
                op: eq
                value: true
            - path: "{.peer-transport-security.client-cert-auth}"
              compare:
                op: eq
                value: true
        remediation: |
          By default, RKE2 sets the --peer-cert-auth parameter to true.
          If this check fails, ensure that the configuration file $etcdconf
          has not been modified to disable peer client certificate authentication.
        scored: true

      - id: 2.6
        text: "Ensure that the --peer-auto-tls argument is not set to true (Automated)"
        audit: "/bin/ps -fC $etcdbin"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--peer-auto-tls"
              env: "ETCD_PEER_AUTO_TLS"
              set: false
            - flag: "--peer-auto-tls"
              env: "ETCD_PEER_AUTO_TLS"
              compare:
                op: eq
                value: false
              set: true
            - path: "{.peer-transport-security.auto-tls}"
              compare:
                op: eq
                value: false
        remediation: |
          By default, RKE2 does not set the --peer-auto-tls parameter.
          If this check fails, edit the etcd pod specification file $etcdconf on the master
          node and either remove the --peer-auto-tls parameter or set it to false.
          peer-transport-security:
            auto-tls: false
        scored: true

      - id: 2.7
        text: "Ensure that a unique Certificate Authority is used for etcd (Automated)"
        audit: "/bin/ps -fC $etcdbin"
        audit_config: "cat $etcdconf"
        tests:
          bin_op: or
          test_items:
            - flag: "--trusted-ca-file"
              env: "ETCD_TRUSTED_CA_FILE"
            - path: "{.peer-transport-security.trusted-ca-file}"
              compare:
                op: eq
                value: "/var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt"
              set: true
        remediation: |
          By default, RKE2 generates a unique certificate authority for etcd.
          This is located at /var/lib/rancher/rke2/server/tls/etcd/peer-ca.crt.
          If this check fails, ensure that the configuration file $etcdconf
          has not been modified to use a shared certificate authority.
        scored: true
