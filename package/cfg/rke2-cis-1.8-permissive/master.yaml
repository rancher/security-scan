---
controls:
version: "cis-1.8"
id: 1
text: "Control Plane Security Configuration"
type: "master"
groups:
  - id: 1.1
    text: "Control Plane Node Configuration Files"
    checks:
      - id: 1.1.1
        text: "Ensure that the API server pod specification file permissions are set to 600 or more restrictive (Manual)"
        audit: "stat -c permissions=%a $apiserverconf"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the
          control plane node.
          For example, chmod 600 $apiserverconf
        scored: false

      - id: 1.1.2
        text: "Ensure that the API server pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $apiserverconf; then stat -c %U:%G $apiserverconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chown root:root $apiserverconf
        scored: true

      - id: 1.1.3
        text: "Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive (Manual)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c permissions=%a $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chmod 600 $controllermanagerconf
        scored: false

      - id: 1.1.4
        text: "Ensure that the controller manager pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerconf; then stat -c %U:%G $controllermanagerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chown root:root $controllermanagerconf
        scored: true

      - id: 1.1.5
        text: "Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive (Manual)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c permissions=%a $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chmod 600 $schedulerconf
        scored: false

      - id: 1.1.6
        text: "Ensure that the scheduler pod specification file ownership is set to root:root (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerconf; then stat -c %U:%G $schedulerconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chown root:root $schedulerconf
        scored: true

      - id: 1.1.7
        text: "Ensure that the etcd pod specification file permissions are set to 600 or more restrictive (Manual)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c permissions=%a $etcdconf; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          If running master only with no etcd role, this check is Not applicable.
          If controlplane and etcd roles are present on the same nodes but this check is warn then
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod 600 $etcdconf
        scored: false

      - id: 1.1.8
        text: "Ensure that the etcd pod specification file ownership is set to root:root (Manual)"
        audit: "/bin/sh -c 'if test -e $etcdconf; then stat -c %U:%G $etcdconf; fi'"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          If running master only with no etcd role, this check is Not applicable.
          If controlplane and etcd roles are present on the same nodes but this check is warn then
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown root:root $etcdconf
        scored: false

      - id: 1.1.9
        text: "Ensure that the Container Network Interface file permissions are set to 600 or more restrictive (Manual)"
        audit: |
          ps -fC ${kubeletbin:-kubelet} | grep -- --cni-conf-dir || echo "/etc/cni/net.d" | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c permissions=%a
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c permissions=%a
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
        remediation: |
          Note that for many CNIs, a lock file is created with permissions 750. This is expected and can be ignored.
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chmod 600 /var/lib/cni/networks/<filename> and chmod 600 /etc/cni/net.d/<filename>
        scored: false

      - id: 1.1.10
        text: "Ensure that the Container Network Interface file ownership is set to root:root (Manual)"
        audit: |
          ps -fC ${kubeletbin:-kubelet} | grep -- --cni-conf-dir || echo "/etc/cni/net.d" | sed 's%.*cni-conf-dir[= ]\([^ ]*\).*%\1%' | xargs -I{} find {} -mindepth 1 | xargs --no-run-if-empty stat -c %U:%G
          find /var/lib/cni/networks -type f 2> /dev/null | xargs --no-run-if-empty stat -c %U:%G
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown root:root <path/to/cni/files>
        scored: false

      - id: 1.1.11
        text: "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Manual)"
        audit: "stat -c permissions=%a $etcddatadir"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "700"
              set: true
        remediation: |
          If running master only with no etcd role, this check is Not applicable.
          If controlplane and etcd roles are present on the same nodes but this check is warn then
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the command 'ps -ef | grep etcd'.
          Run the below command (based on the etcd data directory found above). For example,
          chmod 700 $etcddatadir
        scored: false

      - id: 1.1.12
        text: "Ensure that the etcd data directory ownership is set to etcd:etcd (Manual)"
        type: "skip"
        audit: "stat -c %U:%G $etcddatadir"
        tests:
          test_items:
            - flag: "etcd:etcd"
        remediation: |
          If running master only with no etcd role, this check is Not applicable.
          If controlplane and etcd roles are present on the same nodes but this check is warn then
          On the etcd server node, get the etcd data directory, passed as an argument --data-dir,
          from the command 'ps -ef | grep etcd'.
          Run the below command (based on the etcd data directory found above).
          For example, chown etcd:etcd $etcddatadir
        scored: false

      - id: 1.1.13
        text: "Ensure that the admin.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "stat -c permissions=%a /var/lib/rancher/rke2/server/cred/admin.kubeconfig"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chmod 600 /var/lib/rancher/rke2/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.14
        text: "Ensure that the admin.conf file ownership is set to root:root (Automated)"
        audit: "stat -c %U:%G /var/lib/rancher/rke2/server/cred/admin.kubeconfig"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example, chown root:root /var/lib/rancher/rke2/server/cred/admin.kubeconfig
        scored: true

      - id: 1.1.15
        text: "Ensure that the scheduler.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $schedulerkubeconfig; then stat -c permissions=%a $schedulerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod 600 $schedulerkubeconfig
        scored: true

      - id: 1.1.16
        text: "Ensure that the scheduler.conf file ownership is set to root:root (Automated)"
        audit: "stat -c %U:%G $schedulerkubeconfig"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown root:root $schedulerkubeconfig
        scored: true

      - id: 1.1.17
        text: "Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive (Automated)"
        audit: "/bin/sh -c 'if test -e $controllermanagerkubeconfig; then stat -c permissions=%a $controllermanagerkubeconfig; fi'"
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod 600 $controllermanagerkubeconfig
        scored: true

      - id: 1.1.18
        text: "Ensure that the controller-manager.conf file ownership is set to root:root (Automated)"
        audit: "stat -c %U:%G $controllermanagerkubeconfig"
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown root:root $controllermanagerkubeconfig
        scored: true

      - id: 1.1.19
        text: "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Automated)"
        audit: "stat -c %U:%G /var/lib/rancher/rke2/server/tls"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "root:root"
              compare:
                op: eq
                value: "root:root"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chown -R root:root /var/lib/rancher/rke2/server/tls
        scored: true

      - id: 1.1.20
        text: "Ensure that the Kubernetes PKI certificate file permissions are set to 600 or more restrictive (Manual)"
        audit: "stat -c permissions=%a /var/lib/rancher/rke2/server/tls/*.crt"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod -R 600 /var/lib/rancher/rke2/server/tls/*.crt
        scored: false

      - id: 1.1.21
        text: "Ensure that the Kubernetes PKI key file permissions are set to 600 (Automated)"
        audit: "stat -c permissions=%a /var/lib/rancher/rke2/server/tls/*.key"
        use_multiple_values: true
        tests:
          test_items:
            - flag: "permissions"
              compare:
                op: bitmask
                value: "600"
              set: true
        remediation: |
          Run the below command (based on the file location on your system) on the control plane node.
          For example,
          chmod -R 600 /var/lib/rancher/rke2/server/tls/*.key
        scored: true

  - id: 1.2
    text: "API Server"
    checks:
      - id: 1.2.1
        text: "Ensure that the --anonymous-auth argument is set to false (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        type: manual
        tests:
          test_items:
            - flag: "--anonymous-auth"
              compare:
                op: eq
                value: false
        remediation: |
          By default, RKE2 sets the --anonymous-auth argument to false.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove anything similar to below.
          kube-apiserver-arg:
            - "anonymous-auth=true"
        scored: false

      - id: 1.2.2
        text: "Ensure that the --token-auth-file parameter is not set (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--token-auth-file"
              set: false
        remediation: |
          Follow the documentation and configure alternate mechanisms for authentication.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove anything similar to below.
          kube-apiserver-arg:
            - "token-auth-file=<path>"
        scored: true

      - id: 1.2.3
        text: "Ensure that the --DenyServiceExternalIPs is set (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "DenyServiceExternalIPs"
        remediation: |
          By default, RKE2 does not set DenyServiceExternalIPs.
          To enable this flag, edit the RKE2 config file /etc/rancher/rke2/config.yaml like below.
          kube-apiserver-arg:
            - "enable-admission-plugins=DenyServiceExternalIPs"
        scored: false

      - id: 1.2.4
        text: "Ensure that the --kubelet-client-certificate and --kubelet-client-key arguments are set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: and
          test_items:
            - flag: "--kubelet-client-certificate"
              set: true
            - flag: "--kubelet-client-key"
              set: true
        remediation: |
          By default, RKE2 automatically provides the kubelet client certificate and key.
          They are generated and located at /var/lib/rancher/rke2/server/tls/client-kube-apiserver.crt and /var/lib/rancher/rke2/server/tls/client-kube-apiserver.key
          If for some reason you need to provide your own certificate and key, you can set the
          below parameters in the RKE2 config file /etc/rancher/rke2/config.yaml.
          kube-apiserver-arg:
            - "kubelet-client-certificate=<path/to/client-cert-file>"
            - "kubelet-client-key=<path/to/client-key-file>"
        scored: true

      - id: 1.2.5
        text: "Ensure that the --kubelet-certificate-authority argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--kubelet-certificate-authority"
              set: true
        remediation: |
          By default, RKE2 automatically provides the kubelet CA cert file, at /var/lib/rancher/rke2/server/tls/server-ca.crt.
          If for some reason you need to provide your own ca certificate, look at using the rke2 certificate command line tool.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "kubelet-certificate-authority=<path/to/ca-cert-file>"
        scored: true

      - id: 1.2.6
        text: "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: nothave
                value: "AlwaysAllow"
              set: true
        remediation: |
          By default, RKE2 does not set the --authorization-mode to AlwaysAllow.
          If this check fails, edit RKE2 config file /etc/rancher/rke2/config.yaml, remove any lines like below.
          kube-apiserver-arg:
            - "authorization-mode=AlwaysAllow"
        scored: true

      - id: 1.2.7
        text: "Ensure that the --authorization-mode argument includes Node (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "Node"
              set: true
        remediation: |
          By default, RKE2 sets the --authorization-mode to Node and RBAC.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml,
          ensure that you are not overriding authorization-mode.
        scored: true

      - id: 1.2.8
        text: "Ensure that the --authorization-mode argument includes RBAC (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--authorization-mode"
              compare:
                op: has
                value: "RBAC"
              set: true
        remediation: |
          By default, RKE2 sets the --authorization-mode to Node and RBAC.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml,
          ensure that you are not overriding authorization-mode.
        scored: true

      - id: 1.2.9
        text: "Ensure that the admission control plugin EventRateLimit is set (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "EventRateLimit"
              set: true
        remediation: |
          Follow the Kubernetes documentation and set the desired limits in a configuration file.
          Then, edit the RKE2 config file /etc/rancher/rke2/config.yaml and set the below parameters.
          kube-apiserver-arg:
            - "enable-admission-plugins=...,EventRateLimit,..."
            - "admission-control-config-file=<path/to/configuration/file>"
        scored: false

      - id: 1.2.10
        text: "Ensure that the admission control plugin AlwaysAdmit is not set (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: nothave
                value: AlwaysAdmit
              set: true
            - flag: "--enable-admission-plugins"
              set: false
        remediation: |
          By default, RKE2 does not set the --enable-admission-plugins to AlwaysAdmit.
          If this check fails, edit RKE2 config file /etc/rancher/rke2/config.yaml, remove any lines like below.
          kube-apiserver-arg:
            - "enable-admission-plugins=AlwaysAdmit"
        scored: true

      - id: 1.2.11
        text: "Ensure that the admission control plugin AlwaysPullImages is set (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "AlwaysPullImages"
              set: true
        remediation: |
          Permissive, per CIS guidelines,
          "This setting could impact offline or isolated clusters, which have images pre-loaded and
          do not have access to a registry to pull in-use images. This setting is not appropriate for
          clusters which use this configuration."
          Edit the RKE2 config file /etc/rancher/rke2/config.yaml
          on the control plane node and set the --enable-admission-plugins parameter to include
          AlwaysPullImages.
          --enable-admission-plugins=...,AlwaysPullImages,...
        scored: false

      - id: 1.2.12
        text: "Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        type: "skip"
        tests:
          bin_op: or
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "SecurityContextDeny"
              set: true
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "PodSecurityPolicy"
              set: true
        remediation: |
          Not Applicable.
          Enabling Pod Security Policy is no longer supported on RKE2 v1.25+ and will cause applications to unexpectedly fail.
        scored: false

      - id: 1.2.13
        text: "Ensure that the admission control plugin ServiceAccount is set (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "ServiceAccount"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          By default, RKE2 does not set the --disable-admission-plugins to anything.
          Follow the documentation and create ServiceAccount objects as per your environment.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "disable-admission-plugins=ServiceAccount"
        scored: true

      - id: 1.2.14
        text: "Ensure that the admission control plugin NamespaceLifecycle is set (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--disable-admission-plugins"
              compare:
                op: nothave
                value: "NamespaceLifecycle"
            - flag: "--disable-admission-plugins"
              set: false
        remediation: |
          By default, RKE2 does not set the --disable-admission-plugins to anything.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "disable-admission-plugins=...,NamespaceLifecycle,..."
        scored: true

      - id: 1.2.15
        text: "Ensure that the admission control plugin NodeRestriction is set (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--enable-admission-plugins"
              compare:
                op: has
                value: "NodeRestriction"
              set: true
        remediation: |
          By default, RKE2 sets the --enable-admission-plugins to NodeRestriction.
          Check the RKE2 config file /etc/rancher/rke2/config.yaml, and ensure that you are not overriding the admission plugins.
          If you are, include NodeRestriction in the list.
          kube-apiserver-arg:
            - "enable-admission-plugins=...,NodeRestriction,..."
        scored: true

      - id: 1.2.16
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          By default, RKE2 sets the --profiling argument to false.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "profiling=true"
        scored: true

      - id: 1.2.17
        text: "Ensure that the --audit-log-path argument is set (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--audit-log-path"
              set: true
        remediation: |
          By default, RKE2 sets the --audit-log-path argument to /var/lib/rancher/rke2/server/logs/audit.log
          If you want to change this, edit the RKE2 config file /etc/rancher/rke2/config.yaml
          on the control plane node and set the --audit-log-path parameter to a suitable path and
          file where you would like audit logs to be written, for example,
          kube-apiserver-arg:
            - "audit-log-path=/var/log/rke2/audit.log"
        scored: false

      - id: 1.2.18
        text: "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--audit-log-maxage"
              compare:
                op: gte
                value: 30
              set: true
        remediation: |
          By default, RKE2 sets the --audit-log-maxage argument to 30 days.
          If you want to change this, edit the RKE2 config file /etc/rancher/rke2/config.yaml
          on the control plane node and set the --audit-log-maxage parameter to an appropriate number of days, for example,
          kube-apiserver-arg:
            - "audit-log-maxage=40"
        scored: false

      - id: 1.2.19
        text: "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--audit-log-maxbackup"
              compare:
                op: gte
                value: 10
              set: true
        remediation: |
          By default, RKE2 sets the --audit-log-maxbackup argument to 10.
          If you want to change this, edit the RKE2 config file /etc/rancher/rke2/config.yaml
          on the control plane node and set the --audit-log-maxbackup parameter to an appropriate value.
          For example,
          kube-apiserver-arg:
            - "audit-log-maxbackup=15"
        scored: false

      - id: 1.2.20
        text: "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate (Manual)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--audit-log-maxsize"
              compare:
                op: gte
                value: 100
              set: true
        remediation: |
          By default, RKE2 sets the --audit-log-maxsize argument to 100 MB.
          If you want to change this, edit the RKE2 config file /etc/rancher/rke2/config.yaml
          on the control plane node and set the --audit-log-maxsize parameter to an appropriate size in MB.
          For example,
          kube-apiserver-arg:
            - "audit-log-maxsize=150"
        scored: false

      - id: 1.2.21
        text: "Ensure that the --request-timeout argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--request-timeout"
              set: false
            - flag: "--request-timeout"
        remediation: |
          Permissive, per CIS guidelines,
          "it is recommended to set this limit as appropriate and change the default limit of 60 seconds only if needed".
          Edit the RKE2 config file /etc/rancher/rke2/config.yaml
          and set the below parameter if needed. For example,
          kube-apiserver-arg:
            - "request-timeout=300s"
        scored: true

      - id: 1.2.22
        text: "Ensure that the --service-account-lookup argument is set to true (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--service-account-lookup"
              set: false
            - flag: "--service-account-lookup"
              compare:
                op: eq
                value: true
        remediation: |
          By default, RKE2 does not set the --service-account-lookup argument.
          Edit the RKE2 config file /etc/rancher/rke2/config.yaml and set the service-account-lookup. For example,
          kube-apiserver-arg:
            - "service-account-lookup=true"
          Alternatively, you can delete the service-account-lookup parameter from this file so
          that the default takes effect.
        scored: true

      - id: 1.2.23
        text: "Ensure that the --service-account-key-file argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--service-account-key-file"
              set: true
        remediation: |
          RKE2 automatically generates and sets the service account key file.
          It is located at /var/lib/rancher/rke2/server/tls/service.key.
          If this check fails, edit RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "service-account-key-file=<path>"
        scored: true

      - id: 1.2.24
        text: "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: and
          test_items:
            - flag: "--etcd-certfile"
              set: true
            - flag: "--etcd-keyfile"
              set: true
        remediation: |
          RKE2 automatically generates and sets the etcd certificate and key files.
          They are located at /var/lib/rancher/rke2/server/tls/etcd/client.crt and /var/lib/rancher/rke2/server/tls/etcd/client.key.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "etcd-certfile=<path>"
            - "etcd-keyfile=<path>"
        scored: true

      - id: 1.2.25
        text: "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          bin_op: and
          test_items:
            - flag: "--tls-cert-file"
              set: true
            - flag: "--tls-private-key-file"
              set: true
        remediation: |
          By default, RKE2 automatically generates and provides the TLS certificate and private key for the apiserver.
          They are generated and located at /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.crt and /var/lib/rancher/rke2/server/tls/serving-kube-apiserver.key
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "tls-cert-file=<path>"
            - "tls-private-key-file=<path>"
        scored: true

      - id: 1.2.26
        text: "Ensure that the --client-ca-file argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--client-ca-file"
              set: true
        remediation: |
          By default, RKE2 automatically provides the client certificate authority file.
          It is generated and located at /var/lib/rancher/rke2/server/tls/client-ca.crt.
          If for some reason you need to provide your own ca certificate, look at using the rke2 certificate command line tool.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "client-ca-file=<path>"
        scored: true

      - id: 1.2.27
        text: "Ensure that the --etcd-cafile argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--etcd-cafile"
              set: true
        remediation: |
          By default, RKE2 automatically provides the etcd certificate authority file.
          It is generated and located at /var/lib/rancher/rke2/server/tls/client-ca.crt.
          If for some reason you need to provide your own ca certificate, look at using the rke2 certificate command line tool.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-apiserver-arg:
            - "etcd-cafile=<path>"
        scored: true

      - id: 1.2.28
        text: "Ensure that the --encryption-provider-config argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--encryption-provider-config"
        remediation: |
          RKE2 always is configured to encrypt secrets.
          Secrets encryption is managed with the rke2 secrets-encrypt command line tool.
          If needed, you can find the generated encryption config at /var/lib/rancher/rke2/server/cred/encryption-config.json
        scored: true

      - id: 1.2.29
        text: "Ensure that encryption providers are appropriately configured (Automated)"
        type: "skip"
        audit: |
          ENCRYPTION_PROVIDER_CONFIG=$(ps -ef | grep $apiserverbin | grep -- --encryption-provider-config | sed 's%.*encryption-provider-config[= ]\([^ ]*\).*%\1%')
          if test -e $ENCRYPTION_PROVIDER_CONFIG; then grep -o 'providers\"\:\[.*\]' $ENCRYPTION_PROVIDER_CONFIG | grep -o "[A-Za-z]*" | head -2 | tail -1  | sed 's/^/provider=/'; fi
        tests:
          test_items:
            - flag: "provider"
              compare:
                op: valid_elements
                value: "aescbc,kms,secretbox"
        remediation: |
          RKE2 always is configured to use the aescbc encryption provider to encrypt secrets.
          Secrets encryption is managed with the rke2 secrets-encrypt command line tool.
          If needed, you can find the generated encryption config at /var/lib/rancher/rke2/server/cred/encryption-config.json
        scored: true

      - id: 1.2.30
        text: "Ensure that the API Server only makes use of Strong Cryptographic Ciphers (Automated)"
        audit: "/bin/ps -fC $apiserverbin"
        tests:
          test_items:
            - flag: "--tls-cipher-suites"
              compare:
                op: valid_elements
                value: "TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,TLS_RSA_WITH_3DES_EDE_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_GCM_SHA384"
        remediation: |
          By default, the RKE2 kube-apiserver complies with this test. Changes to these values may cause regression, therefore ensure that all apiserver clients support the new TLS configuration before applying it in production deployments.
          If a custom TLS configuration is required, consider also creating a custom version of this rule that aligns with your requirements.
          If this check fails, remove any custom configuration around `tls-cipher-suites` or update the /etc/rancher/rke2/config.yaml file to match the default by adding the following:
          kube-apiserver-arg:
          - "tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305"
        scored: true

  - id: 1.3
    text: "Controller Manager"
    checks:
      - id: 1.3.1
        text: "Ensure that the --terminated-pod-gc-threshold argument is set as appropriate (Manual)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: "--terminated-pod-gc-threshold"
        remediation: |
          By default, RKE2 sets a terminated-pod-gc-threshold of 1000.
          If you need to change this value, edit the RKE2 config file /etc/rancher/rke2/config.yaml on the control plane node
          and set the --terminated-pod-gc-threshold to an appropriate threshold,
          kube-controller-manager-arg:
            - "terminated-pod-gc-threshold=10"
        scored: false

      - id: 1.3.2
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          By default, RKE2 sets the --profiling argument to false.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-controller-manager-arg:
            - "profiling=true"
        scored: true

      - id: 1.3.3
        text: "Ensure that the --use-service-account-credentials argument is set to true (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: "--use-service-account-credentials"
              compare:
                op: noteq
                value: false
              set: true
        remediation: |
          By default, RKE2 sets the --use-service-account-credentials argument to true.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-controller-manager-arg:
            - "use-service-account-credentials=false"
        scored: true

      - id: 1.3.4
        text: "Ensure that the --service-account-private-key-file argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: "--service-account-private-key-file"
              set: true
        remediation: |
          By default, RKE2 automatically provides the service account private key file.
          It is generated and located at /var/lib/rancher/rke2/server/tls/service.current.key.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-controller-manager-arg:
            - "service-account-private-key-file=<path>"
        scored: true

      - id: 1.3.5
        text: "Ensure that the --root-ca-file argument is set as appropriate (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          test_items:
            - flag: "--root-ca-file"
              set: true
        remediation: |
          By default, RKE2 automatically provides the root CA file.
          It is generated and located at /var/lib/rancher/rke2/server/tls/server-ca.crt.
          If for some reason you need to provide your own ca certificate, look at using the rke2 certificate command line tool.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-controller-manager-arg:
            - "root-ca-file=<path>"
        scored: true

      - id: 1.3.6
        text: "Ensure that the RotateKubeletServerCertificate argument is set to true (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--feature-gates"
              compare:
                op: nothave
                value: "RotateKubeletServerCertificate=false"
              set: true
            - flag: "--feature-gates"
              set: false
        remediation: |
          Edit the Controller Manager pod specification file $controllermanagerconf
          on the control plane node and set the --feature-gates parameter to include RotateKubeletServerCertificate=true.
          --feature-gates=RotateKubeletServerCertificate=true
        scored: true

      - id: 1.3.7
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)"
        audit: "/bin/ps -fC $controllermanagerbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          By default, RKE2 sets the --bind-address argument to 127.0.0.1
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-controller-manager-arg:
            - "bind-address=<IP>"
        scored: true

  - id: 1.4
    text: "Scheduler"
    checks:
      - id: 1.4.1
        text: "Ensure that the --profiling argument is set to false (Automated)"
        audit: "/bin/ps -fC $schedulerbin"
        tests:
          test_items:
            - flag: "--profiling"
              compare:
                op: eq
                value: false
              set: true
        remediation: |
          By default, RKE2 sets the --profiling argument to false.
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-scheduler-arg:
            - "profiling=true"
        scored: true

      - id: 1.4.2
        text: "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)"
        audit: "/bin/ps -fC $schedulerbin"
        tests:
          bin_op: or
          test_items:
            - flag: "--bind-address"
              compare:
                op: eq
                value: "127.0.0.1"
              set: true
            - flag: "--bind-address"
              set: false
        remediation: |
          By default, RKE2 sets the --bind-address argument to 127.0.0.1
          If this check fails, edit the RKE2 config file /etc/rancher/rke2/config.yaml and remove any lines like below.
          kube-scheduler-arg:
            - "bind-address=<IP>"
        scored: true
